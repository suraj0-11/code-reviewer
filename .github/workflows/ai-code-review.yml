name: Universal AI Code Review

on:
  push:
    branches: [ main, master, development ]
  pull_request:
    branches: [ main, master, development ]

jobs:
  ai-code-review:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install Ollama
      run: |
        # Download and install Ollama
        curl -fsSL https://ollama.com/install.sh | sh
        
        # Ensure Ollama service is enabled and started
        sudo systemctl enable ollama
        sudo systemctl start ollama
        
        # Wait for Ollama to be fully operational
        for i in {1..30}; do
          if curl -s http://localhost:11434 > /dev/null; then
            echo "Ollama is running"
            break
          fi
          sleep 2
        done
    
    - name: Pull Llama3.2 Model
      run: |
        # Pull specific Llama3.2 model
        ollama pull llama3.2:latest
    
    - name: Create .env File
      run: |
        echo "OLLAMA_API_BASE_URL=http://localhost:11434/api/generate" > .env
        echo "REVIEW_CATEGORIES=1. Code Structure, 2. Performance, 3. Security, 4. Best Practices, 5. Potential Improvements" >> .env
    
    - name: Install Python Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install requests flask flask-cors python-dotenv
    
    - name: Set up Backend Server
      run: |
        cd backend
        pip install -r requirements.txt
        python main.py &
        sleep 10  # Give time for the server to start
    
    - name: Run Comprehensive Code Review
      run: |
        mkdir -p code-reviews
        python3 - << EOF
        import os
        import requests
        import json
        import re
        import traceback
        from dotenv import load_dotenv

        # Load environment variables
        load_dotenv()

        def is_source_file(path):
            source_extensions = [
                '.py', '.js', '.jsx', '.ts', '.tsx', 
                '.java', '.cpp', '.c', '.rb', '.go', 
                '.php', '.swift', '.kt', '.rs', 
                '.html', '.css', '.scss', '.lua'
            ]
            return any(path.endswith(ext) for ext in source_extensions)

        def sanitize_markdown(text):
            # Robust markdown sanitization
            if not text:
                return "No review content available."
            return text.replace('|', '\\|').replace('*', '\\*').replace('_', '\\_')

        def review_code(file_path):
            try:
                with open(file_path, 'r', encoding='utf-8') as f:
                    code = f.read()
                
                response = requests.post(
                    'http://localhost:5000/api/review', 
                    json={'code': code, 'fileName': os.path.basename(file_path)},
                    headers={'Content-Type': 'application/json'},
                    timeout=300  # Increased timeout for detailed review
                )
                
                if response.status_code == 200:
                    return response.json()
                else:
                    print(f"Error reviewing {file_path}: {response.text}")
                    return None
            except Exception as e:
                print(f"Exception reviewing {file_path}: {traceback.format_exc()}")
                return None

        def generate_markdown_report(reviews):
            review_categories = os.getenv('REVIEW_CATEGORIES', '').split(', ')
            
            markdown = "# ðŸ¤– Comprehensive AI Code Review Report\n\n"
            markdown += "## Overview\n\n"
            
            successful_reviews = [r for r in reviews if r]
            markdown += f"**Total Files Reviewed:** {len(successful_reviews)}\n\n"
            
            markdown += "## Detailed Reviews\n\n"
            
            for file_review in successful_reviews:
                filename = file_review.get('fileName', 'Unknown File')
                markdown += f"### File: `{filename}`\n\n"
                
                # Safely access nested review results
                review_results = file_review.get('reviewResults', {})
                comprehensive_review = review_results.get('comprehensive_review', 'No detailed review available.')
                
                markdown += "#### Comprehensive Review\n\n"
                markdown += f"```markdown\n{sanitize_markdown(comprehensive_review)}\n```\n\n"
            
            return markdown

        # Exclusion list for directories and files
        EXCLUDE_DIRS = [
            '.git', 'node_modules', 'dist', 'build', 
            'venv', '.venv', 'env', '.env', 
            'coverage', 'logs', '__pycache__'
        ]

        def should_exclude(path):
            return any(exclude in path.split(os.path.sep) for exclude in EXCLUDE_DIRS)

        # Recursively find and review source code files
        reviews = []
        for root, _, files in os.walk('.'):
            for file in files:
                full_path = os.path.join(root, file)
                
                # Skip excluded directories and non-source files
                if should_exclude(full_path) or not is_source_file(full_path):
                    continue
                
                print(f"Reviewing: {full_path}")
                review = review_code(full_path)
                if review:
                    reviews.append(review)

        # Generate comprehensive markdown report
        if reviews:
            report = generate_markdown_report(reviews)
            
            # Save markdown report
            with open('code-reviews/comprehensive_review.md', 'w', encoding='utf-8') as f:
                f.write(report)
        
        if not reviews:
            print("No source code files found or reviewed.")
        EOF
    
    - name: Commit Review Results
      run: |
        git config user.name github-actions
        git config user.email github-actions@github.com
        git add code-reviews/comprehensive_review.md || true
        git commit -m "Add AI Code Review Report" || true
        git push || true
